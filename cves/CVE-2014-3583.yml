CVE: CVE-2014-3583
yaml_instructions:
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2014-11-12
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "Apache Description - An out-of-bounds memory read was found in mod_proxy_fcgi.
  \nA malicious FastCGI server could send a carefully crafted response which could
  lead\nto a crash when reading past the end of a heap memory or stack buffer. This
  issue\naffects version 2.4.10 only.\n\nWhen an Apache HTTPD server is sent a long
  HTTP header from a FastCGI server, there is\na potential for a buffer overflow error.
  Apache HTTPD will read long headers and end up\nreading memory past the end of the
  header that was sent in. This caused denial of service\nissues due to the potential
  for segmentation faults from buffer overflow.\n\nFastCGI is a protocol (similar
  to how HTTP is a protocol) that allows servers to execute\nCGI (Common Gateway Interface)
  scripts on a web server. CGI is used as middleware to \nallow servers to pass data
  to/from an application or web server. For example, CGI could be\nused to send data
  between a database and web server.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews:
- 1641551
bugs: []
repo: https://github.com/apache/httpd
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: f2d64096855789a51b02af4aaa8bbdfb1680bd28
  note: |-
    Adds a length check to the header reader in order to prevent read overflow issues

    The length check is necessary since headers from FastCGI do not include '\0'


    Formerly 55ad7eb6a83b25282727e3b8baad43db15dbc29b before HTTPD rewrote Git history.
- commit: b1a62de7bc46039798e5ebb129d9c27ca3d7044e
  note: |-
    Added patch notes to code comments

    Formerly 172bec20e4a8de666627763d4e578e29b48e9d0e before HTTPD rewrote Git history.
- commit: 5698a9356ef205369ba8aaa75c6f58d5fd3c0388
  note: |-
    Added patch notes to code comments

    Formerly bfee66b7999b318509bb6f8702587925ecc9094d before HTTPD rewrote Git history.
vccs:
- commit: 31e1a51f0f614de2d40711a0bd4324c6b39ffc66
  note: Fixed a bug that caused a crash if long headers were received
- commit:
  note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    This vulnerability is in the FastCGI authentication module of HTTPD. All modules
    are unit tested when they are first developed or modified/patch in accordance with the Apahce
    software development process, so both the vulnerability and fix were required to undergo
    unit testing.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    White hat hacker Teguh P. Alko discovered the vulnerability while searching for
    security issues in HTTPD. From the information available on the web, it appears that
    Alko is an individual who contributes to Apache projects on his spare time.
  date: 2014-09-17
  automated: false
  google: false
  contest: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: "Subsystem name found in documentation. The vulnerability is in a module
    for \nauthentication & authorization. The path name is 'aaa', which also stands
    for authentication \nand authorization.\n"
  name: Authentication and Authorization
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  answer: |
    There are no commits between the VCC and fix. According to git blame, the line of code
    containing the vulnerability was not modified between the VCC and the fix commit.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  instructions: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  note:
  answer:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean. Explain your answer
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: "Vulnerability was caused by trusting that external input already contained
      a \nnull char '\\0'. Null terminators are used by the C language to denote the
      end \nof a string. For example, string \"foo\" would be \"foo\\0\" in memory.\n"
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
  fail_securely:
    applies: true
    note: The vulnerability caused a segfault, which would've violated the availability
      of the entire system
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "This was a coding mistake, and to an extent, a design mistake. When Apache
    was\ninitially writing this function, they assumed that any header coming in from
    another\nserver would include the buffer end character, '\\0'. This null character
    is the only\nmechanism that stops C from reading memory past the end of the string.
    \n\nIn C, every string allocated includes a null character at the end. However,
    the\nvulnerability specifically relates to large headers coming specficially from
    a remote\nFastCGI server. One good principal in secure coding is to not trust
    an input's validity\nif it is coming from outside a trust boundary. In this case,
    the Apache developers\nplaced too much trust on the assumption that any header
    would include a null character.\nIt lead to them writing code that relied solely
    on the existence of an end character in input\nto prevent overflow errors. The
    developers should have not trusted the validity of \noutside input and placed
    checks to prevent memory from being read\n\nThe fix is extremely simple - check
    the length of an incoming string and read only up to the \nlength of that string.
    This is a good fix, since there isn't a reliance on outside input - the\nheaders
    are checked after they are received. Another potential fix Apache could consider\nimplementing
    is to simply limit the length of the headers, since this vulnerability specifically\nappears
    on headers over a certain length. The drawback of this approach is that it may
    be temporary.\nBecause HTTP standards are always changing, longer headers may
    be the norm in the future and such\na fix will eventually have to be re-fixed
    properly in the future.\n\nThe mistake can also be considered a design mistake.
    It was interesting to see that the vulnerability\naffected this module specifically.
    HTTP headers are not unique to FastCGI - they come from everywhere.\nThe question
    becomes how many other modules are doing their own HTTP header parsing, and why
    would\nonly this module specifically be affected? It may be prudent for Apache
    to consider a single HTTP\nheader parser so that the entire code base can reference
    one uniform parser.\n"
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 125
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:

CVSS: AV:N/AC:L/Au:N/C:N/I:N/A:P
