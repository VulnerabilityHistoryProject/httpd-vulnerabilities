CVE: CVE-2017-7679

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip; this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 126

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2015-11-15

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2017-06-19

published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2017-07-11

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This CVE describes a vulnerability related to the mod_mime module, which itself
  is responsible for associating meta-data to a file requested from the server. 
  Meta-data includes behaviors and attributes, such as the language, encoding,
  character set or mime-type of the file. 

  The vulnerability states that this module is able to "read one byte past the
  end of a buffer when sending a malicious Content-Type response header". In other
  words, if a user sends an HTTP request with some unexpected Content-Type field,
  the Apache server will attempt to read up to one byte of additional memory next
  to the content requested by the user. 
  
  This leads to a buffer overread error, in the mod_mime module which (if not 
  handled properly) has the potential to impact availability of the server by 
  crashing it (DOS), or violating integrity if the data is read without error 
  and returned to the user with potentially sensitive data. Currently, all
  documentation points to potential denial-of-services as being the biggest
  threat. 

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:

reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
   - commit: 0b97b9f7438e3f3444a3eaf320eb545d39059f46
     note: |
      Merge commit, same fix as the commit below along with some
      documentation changes in the repo.
   - commit: 398f3ddeb1ceb8ba710eadf7036a36a41e0e769a
     note: |
      The original fix for the vulnerability exists here. However, it 
      seems that the changes to the repo documentation (STATUS and CHANGES)
      did not match the repo's standards. 
vccs:
  - commit: 3d7d9eefa03ec82d689bf673538ea1f325d55d44
    note: |
      Originates from 19 year old commit to SVN repo here; 
      https://svn.apache.org/viewvc?view=revision&revision=84784
      It appears that the vulnerability originates from a helper function
      for determining whether or not a string is a quoted pair when
      analyzing the contenttype sent to the server by the user. 

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 1

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    The original code was not submitted with a unit test, same goes for
    the fix. After looking through the HTTPD repo, it appears that there are unit
    tests but none of them seem to be directly testing the module in question.
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The bug's discovery is credited to ChenQin and Hanno BÃ¶ck, who
    discovered the bug (how they found it is not detailed) and submitted it
    to the security team. 
    
    Taking a look at IBM's overview of the CVE, we find that "By sending a 
    specially crafted Content-Type response header, a remote attacker could 
    exploit this vulnerability to read one byte past the end of a buffer". This
    implies that the individuals who discovered this vulnerability must have
    accidentally (or purposefully) found a malicious Content-Type string that
    caused the server to exhibit unexpected behavior (returning unexpected data,
    or even crashing the server). 
  date: 2015-11-15
  automated: false
  google: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The bug appears in the HTTP module of the system and appears
    to be related to the parsing of requests sent to the server. 
  name: http

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit:
      note:
    - commit:
      note:

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    The vulnerability was introduced 19 years ago and expanded the capabilities
    of the mod_mime.c file. It seems that content types are being dynamically added
    to some sort of server side pool, but I'm not 100% sure about that. 

    The code has had regular additions/modifications over the course of the last
    19 years, so this isn't a file that was just created and left alone "forever".
  events:
    - name: 
      date: 
    - name:
      date:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Providing a malicious string as input for the Content-Type field 
      impacted availability (and possibly integrity) of the server. As a result,
      we can't exactly trust input here. We aren't necessarily running into an
      injection attack, but there are risks here if input is blindly trusted or
      parsed in a naive way. 
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      We're dealing with potentially complex input, depending on the
      format of the string that the server receives. 

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    After researching the purpose of the module and looking at the
    function where the vulnerability exists in the greater context of its file,
    I'm fairly confident that a simple coding mistake led to this vulnerability.

    At the end of the day, the vulnerability was fixed simply by removing one
    null check and adding another null check in. 
