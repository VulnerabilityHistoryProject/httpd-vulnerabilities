CVE: CVE-2007-6422
yaml_instructions:
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
reported_instructions:
reported:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2008-01-08
published_instructions:
published:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "On sites with a specific setting (mod_proxy_balancer) enabled remote
  users could\ncraft a request that would cause the process handling it to crash.
  If the server\nfor the site was also multi-threaded this would lead to a denial
  of service attack\non the site. \n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 84cb0035c259161663b0064491854fd9899c78de
  note: |-
    adds the check for a valid balancer name

    Formerly 147c868608a3b4bc3f623a47729b39192a110df1 before HTTPD rewrote Git history.
- commit: '0151920d1183bfb0eca003e4ba7fac8df41f0fed'
  note: |-
    make sure a legitimate etag exists

    Formerly 42a666223a0e3d8d53b8cfa956be60b7fdbedce5 before HTTPD rewrote Git history.
- commit: 0abfd39b25433598464c83b07f53e768771b8154
  note: |-
    a method to make sure resources match (matching balancers)

    Formerly 561a3bc94cd4aefb23abdb5372928d34bdfcfd02 before HTTPD rewrote Git history.
vccs:
- commit: 59ad7a1b7cca4e17013bf4a0c5c220256f37472f
  note: |-
    This issue has been around since the very beginnning

    Formerly 92291b5ed38235ba0667769412f86e16cc1b3076 before HTTPD rewrote Git history.
- commit:
  note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    Their code is unit tested but they don't seem to update it very frequently.
    Since launching their testing for the HTTPD servers they have only had a handful
    of requests over the 20 years it has existed. So they didn't have unit tests for this
    specific situation because they considered it an outlier and haven't updated testing.
    They also did not release any test update following the fix in February 2008.
  code: true
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: "I found the bugzilla article on the bug but after reading it found there
    wasn't\na primary contact for the bug. It seems that it was reported 2007-12-12
    and was \nfound by \"Security Reason\" but there is no explanation beyond that
    of how they\ndiscovered it.\n"
  date: 2007-12-12
  automated: false
  google:
  contest:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    It was based in the proxy subsystem. Which is a subsystem containing all of their
    HTTPD Proxies including mod_proxy_balancer.
  name: proxy
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: ab5a5dab3b221361b7e9d90b6f47fb984ea7ca34
    note: |-
      They added a few checks for the workers to "be proactively safe" which is in

      the same location as the balancer name but they didn't put any proactively

      safe checks in for that. Done 4 months before the bug was discovered.


      Formerly d13d437e07cedfbef2a24dbd7d011384f6fa05fa before HTTPD rewrote Git history.
  - commit:
    note:
i18n:
  instructions: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  note:
  answer:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean. Explain your answer
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: "They assumed that people would not just pass the incorect balancer name\nand
      so they did not have any checks for it. They just assumed it was secure\nbased
      on the nature of it. \n"
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: "They accept complex inputs into their proxy. This allows users to pass
      an \nincorrect balancer in the first place. They should sanitize this input
      instead.\n"
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "They weren't correctly checking possible requests that could come into
    their\nserver through a large chunk of data. They didn't sanitize the input allowing\nusers
    to take down the server. They also just didn't think of the outliers in the\nsituation.
    Both having the mod_proxy_balancer and multi-threaded servers on were \nnot the
    default so they didn't build their security around this. That is also why\nthe
    CVE was considered only low priority because not many sites had this combo. \nThe
    solution was to put a check for the correct balancer name which is a fix for this\nspecific
    issue but a better fix may be to sanitize their inputs in the first place and
    not\njust add to the if statement every time an issue arises.\n"
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 399
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:

CVSS: AV:N/AC:L/Au:S/C:N/I:N/A:P
