CVE: CVE-2004-0747
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-119
CVSS: AV:L/AC:L/Au:N/C:P/I:P/A:P
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2004-10-20
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The application fails to validate length for user-inputed strings through the form of
  .httaccess and or httpd.conf config files which can, when malicious, cause a buffer overflow 
  when this string is parsed, expanded, and copied into a finite buffer. This
  can affect an environment variable and gives the user elevated privledges locally.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: [11182]
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
   - commit: f2d3d37f2dd9e1c31efff9e08c6508f1c6198318
     note: |
      Github contributor "notroj" had to rewrite the ap_resolve_env function to avoid buffer overflow. The rewritten function
      uses a SMALL_EXPANSION (set to 5) variable which the function checks to make sure expansion does not occur 
      beyond this to avoid obverlow. It also casts the ap_resolve_env function to (char *).
vccs:
  - commit: 99a9d6e3e02dcd0d996097e8c4d23a39c5dbbf44
    note: |
      Original commit of the ap_resolve_env function that claims that the change for handling environment variable constructs
      is pretty useless and is an instance of feature creep. Developer (dirkx) does not seem to keen on the change.
  - commit:
    note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: Code was not unit tested, and was not after.
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: Discovered by Ulf Harnhammar.
  date: 2004-09-15
  automated: false
  google: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Server environment configuration
  name: server

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit: 58f17628acc2446d1811095b38fdcbb1357d6d55
      note: |
        This commit moved the ap_resolve_env function from server/util.c to server/core.c in preparation
        of a new feature. Does not appear to be for security reasons, as the code written for the fix in 2004 was
        unmodified. As it was used as part of a new feature and wasn't modified, this solidifies the probability that 
        the fix was a good one.
    - commit: 7310a8c6b5a6013667a780b6d849f184e06627e8
      note: Message is - Style police were called back from their vacation. This team is witty.
    - commit: 721890ad66b8c44a1a0fa910293f0b9a769897d2
      note: Fix of original code to ensure only environment variable is passed to the getenv function.
    - commit: c0a4cb787356028a11170db449f9a7d2f8237885
      note: Lots of minor syntax and function parameter changes. Claims to fix command initialisation.
    - commit: 1b036562191b5f27453bdb15da66aba036c77b44
      note: |
        patch of the fix commit that corrects some regression introduced in the case that the function is called
        an environment variable (getenv doesn't return anything).

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer:
  events:
    - name:
      date:
    - name:
      date:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      User supplied strings through config files were not being validated by length. This caused the overflow 
      and subsequent gain of privleges.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies: true
    note: Environment variable expansion is what caused the buffer overflows.
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistakes that were made were primarily coding mistakes as the code written worked as intended but failed
    to check for boundary cases in which overflows could occur. Lots of changes were made between the VCC and the fix,
    and even a patch to the fix was made. It appears there are a lot of factors not considered initially and during the
    lifetime of the vulnerability, as different developers had to keep coming back to the logic. This seems like simple
    miscommunication. They didn't cover all their tracks.

    Looking over their solution, it appears that they opted for the implementation mitigation of CWE-119, 
    as they rewrote all the logic for the function in question, adding length checks, casting, etc. to check for
    extraneous inputs and to avoid harmful overflows. This fix needed one patch, and that was to handle a different 
    use case of the function separate from the issue (miscommunication once again). Since then the function was moved 
    to a different file but not modified. For these reasons, it appears the solution was ultimately proper.
