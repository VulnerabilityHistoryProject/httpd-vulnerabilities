CVE: CVE-2004-1834
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-524
CVSS: AV:L/AC:L/Au:N/C:P/I:N/A:N
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2004-03-20T05:00Z
description_instructions: |
    You can get an initial description from the CVE entry on cve.mitre.org. These
    descriptions are a fine start, but they can be kind of jargony.

    Rewrite this description in your own words. Make it interesting and easy to
    read to anyone with some programming experience. We can always pull up the NVD
    description later to get more technical.

    Try to still be specific in your description, but remove Chromium-specific
    stuff. Remove references to versions, specific filenames, and other jargon
    that outsiders to Chromium would not understand. Technology like "regular
    expressions" is fine, and security phrases like "invalid write" are fine to
    keep too.
description: |
    The mod_disk_cache is a tag that sets the program to use disk based storing of cashes,
    this casheing in included client headers on the users local hard disk. Users can then
    potentially access this information retreiving sensitive data, which includes
    authentication information.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
   - commit: 9fc07d5f0be52aa5cd004a2341b8dd24b79d7fe9
     note: |
          Split mod_disk_cache.c into mod_disk_cache.c and mod_disk_cache.h
          to allow inclusion of mod_disk_cache.h in htcacheclean.c.

vccs:
  - commit: 48074d33e6430e628199c7bd3744519e0d4a29e1
    note: |
        First cut at mod_disk_cache, based on code from the IBM AS400 team. Still
        need to cleanup where some bytes are stored, check-in routines this module
        calls in cache_util, etc.

  - commit: 9421a80d9111d7f2f2beaf726fce10013a33c9af
    note: |
        I haven't created the optional function to specify the cache_key yet,
        That will come after this patch.

        ok.. brief summary of whats changed

        * new Optional Directives
                * CacheMemEntrySize -- max size of a individual entry in memory
                        cache
                * CacheIgnoreNoLastMod - so we can cache mod-included files

        * it tries to figure out the size of the request based on buckets if the
                content-length header isn't set

        * mem_cache now caches the subprocess_env & notes tables
        * the CACHE_IN/OUT/CONDITIONAL run at FTYPE_CONTENT+1, so that
                all other content filters run BEFORE the cache in.

        note: the code is still experimental, and we need a bit more work
        mainly...
        * garbage collection
        * cache stats/reporting
        * manual removal of a key.

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: no
  code:
  fix:

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: via security@apache.org
  date: 2003-03-02
  automated: no
  google: no
  contest: no

subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
      The mistake was in modules/experimental/mod_disk_cache.c, part of the
      Cache subsystem
  name: Cache

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit: bf15094dcdcffbf0f434ff58ffbf1bd8c56b48ec
      note: |
        the content of this commit contains only: "It was sunny this morning,
        but the clouds have moved in.", Commits like this can be worrying as they
        give no explanation as to what code was changed, this could be the result
        of developers fixing too many small bugs or being bored, not a good use of
        team resources"
    - commit: 18eb35a0306d70798b90de3f9bb35e1d37b44d92
      note: |
        This commit disscusses a bug that was patched in the same caching system as the
        vulnerability, the code showed one extra element in the cashe than what
        actually existsed. This shows that multiple developers were working on
        the cache and that it had more than one flaw the developers were working
        to resolve at the time

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
      There were few major events in regards to the history of this vulnerability
      a patch was introduced only 5 days after the vulnerability was reported
      and then it was ultimately fixed months later
  events:
    - name: Patch introduced
      date: 2002-07-02
    - name:
      date:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies: true
    note: the caching function should not have been given access to secure information
          nor should any part of the system that stores credential have been given
          access to write to the hard disk
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The initial developers did not understand either the funcionality of the tools
    they were using for cacheing or the full content of the header of which they
    were caching.
