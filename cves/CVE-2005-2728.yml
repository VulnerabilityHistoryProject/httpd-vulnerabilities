CVE: CVE-2005-2728
yaml_instructions:
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
reported_instructions:
reported:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2005-08-30T11:45Z
published_instructions:
published:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "There is a non-limited byte-range weakness that can cause a denial of
  service attack. \nA byte-range is the buffer size of the input. If an attacker decided
  to fill an HTTP \nheader with a large amount of information, then it can cause the
  memory consumption to \nincrease exponentially. This memory leak can eventually
  lead to the crash of all servers \nwith the same resource allocation. \n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: ac40284b851e5c4a56f192dc0e208b5276c95f98
  note: Formerly a8cecac33a1c63b0436a39d75b9119a3cc872a89 before HTTPD rewrote Git
    history.
- commit: 439221058cd102a3dbfb65f488f9cd56648e199c
  note: |-
    Rename from a previous file

    Formerly 1be2a4f4d27ce22dee4da56dfc21021a454b4253 before HTTPD rewrote Git history.
vccs:
- commit: 439221058cd102a3dbfb65f488f9cd56648e199c
  note: Formerly 1be2a4f4d27ce22dee4da56dfc21021a454b4253 before HTTPD rewrote Git
    history.
- commit: 19dcad16a0fc7ca8f70c5dac9f678d0d91c7abc4
  note: Formerly 46a58379a70dee6d146f77e87bd8253eeb108791 before HTTPD rewrote Git
    history.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: "In the fix commit, there were not tests altered, and in the commits surrounding
    \nthe fix there were not any tests altered. I then searched in and around the
    fixed\ncode to see if there were any tests referenced, and could not find any.
    I went through\nthe different unit test files and could not find any tests for
    this file either. Using\nthis research to make the assumption that this section
    of the code was not unit tested.\n"
  code:
  fix:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: "The bug was found due to employees noticing large memory leaks while using
    the\nAPACHE modules mod_proxy and mod_rewrite to reverse proxy backend web servers.
    \nThe bug was officially discovered and reported by the employee Filip Sneppe.\n"
  date: 2004-07-07T21:39Z
  automated: false
  google: false
  contest:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    The vulnerability was inside core component of the apache http application.
    Located inside of the file byterange_filter.c, which resides
    in the http module subsystem.
  name: httpd/modules/http/
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 439221058cd102a3dbfb65f488f9cd56648e199c
    note: "This is the first pass at refactoring the C source code. The author,\n\nJustin
      Erenkrantz, says that their C source code is a \"behemoth\", weighing \n\nat
      over 150,000 lines of code. Mr. Erenkrantz attempted to change this file\n\nand
      its surrounding files by reorganizing and relocating functions. \n\n\nFormerly
      1be2a4f4d27ce22dee4da56dfc21021a454b4253 before HTTPD rewrote Git history."
  - commit:
    note:
i18n:
  instructions: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  note:
  answer:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean. Explain your answer
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: Distrusting input applies due to the vulnerability requiring malicious input
      to be exploited.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies: true
    note: Yagni applies because the range limit was not set until there was a vulnerability
      with it.
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "In my opinion this was just a mistake of negligence. I think that the lesson\nyagni
    really applies here. There were comments in the code talking about \nhow they
    knew there was no range limit. So they could have just added the check\nto make
    sure that there was an end to the input, however this vulnerability existed\ndue
    to this negligence. According to the CWE, they are mitigating it correctly, \nby
    implementing input validation.\n"
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 789
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
