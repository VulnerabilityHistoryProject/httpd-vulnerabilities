CVE: CVE-2002-0840
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0840
CVSS: AV:N/AC:M/Au:N/C:P/I:P/A:P
curated_instructions: |
curated: true
announced_instructions: |
announced: 2002-10-02
description_instructions: |
description:  
  Apache Server Side Include Cross Site Scripting Vulnerability.  
  This is an input validation error.  Input request headers HTTP/1.1 "Host" are improperly filtered. 
  It is possible to maliciously hijack web sessions and compromise servers by injecting javascript.  
  The following URL will demonstrate the attack http://%3CIMG%20SRC%3D%22%22%20ONERROR%3D%22alert%28document2Ecookie%29%22%3 . 
bounty_instructions: |
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo: https://github.com/apache/httpd/
fixes_vcc_instructions: |
fixes:
   - commit: deaeb1407a553fcfe9a0c8158cad8a780c52139d
     note:  server/core.c,  server/util_script.c
vccs:
  - commit: 5430f8800f5fffd57e7421dee0ac9de8ca4f9573
    note:
  - commit: a83b21763cd2fbfd97bf5cbb5f01ea4d7e7ac3c3
    note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer:
    Not a problem with automated unit tests
  code:
  fix:

discovered:
  question: |
  answer: 
    Discovered by mattmurphy@kc.rr.com mattmurphy@kc.rr.com . 
    No specific details on how the vulnerablity was discovered are provided
  date: 2002-09-20
  automated: false
  google: false
  contest: false

subsystem: Server Core
  question: |
      answer: 
      This is the central routine of the whole server. The fix was to add a routine  "ap_escape_html" to filter the html input headers and remove characters that could cause the problem
  name: server/core

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit:
      note:
    - commit:
      note:

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer:
  events:
    - name:
      date:
    - name:
      date:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: Need to carefully consider all types of unintended input and how it can possibly have adverse consequences
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
