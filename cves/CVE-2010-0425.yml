CVE: CVE-2010-0425
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 416
CVSS: AV:N/AC:L/Au:N/C:C/I:C/A:C
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2010-03-05T19:30Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: The Apache mod_isapi (module that implements the internet server
  extension API. Allows Internet Server extensions)
  module can be forced to unload a specific library
  before the processing of a request is complete, resulting in memory
  corruption. This vulnerability may allow a remote attacker to execute
  arbitrary code.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
   - commit: 2ca67ed8c2733ffc0d9a23c42d0e606a471833ed
     note:
   - commit: e9602aecc484ce45779b1051987c826037d5ff29
     note:
vccs:
  - commit: 30ab960e20117ee6002a3297791427023440e0a7
    note: initial implementation of the file.
  - commit:
    note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: It does not appear automated unit tests were involved.
  code:
  fix: It does not appear that any unit tests were added for the fix.

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: The vulnerability was found by Brett Gervasoni of Sense of Security
    who also proposed a fix for the vulnerability.
  date: 2010-02-09
  automated: nil
  google: nil
  contest: nil

subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The subsystem appears to be in the arch subsystem in the mod_isapi
    file.
  name: arch

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  answer: |
    I didn't find any commits that were very interesting or pertained to this
    vulnerability in the time between when it was introduced and the time that
    it was fixed. In the time between the vcc and the fix there was a lot of
    work done on the file that contained the vulnerability such as bug fixes,
    introducing new functionallity(such as accepting HTTP/1.1 status results).
    I did find it interesting though that the developer who wrote the vccs
    was also the one who implemented the fix.
  commits:
    - commit:
      note:
    - commit:
      note:

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: There were many events between the time the vulnerability was
    introduced and the fix since the vulnerability was introduced when the file
    containing the vulnerability was created which was almost an 8 years.
  events:
    - name: Large bug fix and accepting http 1.1 status results
      date: 2002-03-15
    - name:
      date:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies: true
    note: I feel like this lesson kind of applies here since the piece of code
      that was causing the vulnerability was simply deleted showing that
      the functionallity provided by this piece of code was not needed.
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: I feel like this vulnerability was due to the developers overlooking
    it and not quite understanding what was happening in a piece of their code.
    The fix for the vulnerability was simply deleting 2 lines of code which
    unloaded the ISAPI.dll module in the middle of a request which created
    oprhaned callback pointers. Based on this fix it seems that the
    unloading of the ISAPI.dll method call at that point in the code was
    completely unecessary. I feel like this vulnerability could have been
    caught and addressed earlier if the code was tested/reviewed more
    thoroughly. The biggest takeaway for me from this vulnerability is even
    though code has been working for a long period of time, it does not mean
    that it isn't free of vulnerabilities.
