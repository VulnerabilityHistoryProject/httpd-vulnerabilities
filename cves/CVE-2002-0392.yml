CVE: CVE-2002-0392
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-20 Improper Input Validation
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2002-07-03T04:00Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability was caused by a lack of error-checking which allowed HTTPD
  to accept an invalid size, potentially causing a denial-of-service
  (availability failure) or, on 64-bit systems, an elevation of privilege attack
  allowing attackers to execute arbitrary code by altering return addresses on
  the system stack.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
   - commit: 9ca73a8515b0c9dabb09a80728295027609d92d5
     note: This commit addresses the vulnerability by using strtol() instead of atol() and adding additional error checking.
vccs:
  - commit: 27677a4383e0c5d63d83a276ab931380976ef925
    note: This commit introduces the vulnerability.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: The original code was unit tested, but no tests existed for this edge case.
  code: Automated tests do exist for this module.
  fix: No unit tests for this edge case were added.

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    There is no documentation concerning the discovery of this vulnerability, but
    according to Apache Security Bulletin 20020617, the vulnerability was discovered
    by Mark Litchfield while testing for Oracle vulnerabilities. This bulletin also
    disclosed the vulnerability to the public, making it the best indication of
    when the bug was actually discovered.
  date: 2002-06-017
  automated: false
  google: false
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: This bug existed in the "HTTP" module.
  name: HTTP

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit: 53c5df33be15d6811a638601f29e282e5bea82dd
      note: |
        This commit actually fixes an issue with the range specified in HTTP headers.
        Trouble is, this code only runs if there is a configuration-imposed limit on
        the range. Totally invalid ranges can still be accepted at this commit.
    - commit:
      note:

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: |
    In general, it seemed like the development team was making changes to
    the HTTP header processing (specifically related to chunk encoding) in the
    one-to-two months before the fix was committed. This is probably why the
    vulnerability was discovered, because it was on the team's minds.
  events:
    - name: Code updated to throw HTTP Response Code 413 with an invalid chunk size.
      date: 2002-05-28
    - name: Code updated with additional error handling for chunk size.
      date: 2002-05-29
    - name: Code updated with error handling for chunk size of 0.
      date: 2002-05-29

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
        There is a basic level of input distrust in the original code (VCC) but it
        doesn't go so far as to validate the input against wacky values that may
        be used to attack the system; instead, the validation only tests against
        invalid characters and no range-checking exists in the VCC.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false 
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: true
    note: |
        In the end, it becomes apparent that a greater level of error checking is required.
        This may not apply because some checks existed already, but the checks simply weren't
        robust enough to protect the system.
  complex_inputs:
    applies: false
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This issue may have been mitigated if the system included additional unit test cases.
    The test suite failed to include a case which evaluated this particular type of 
    invalid input, and it brought about a vulnerability. The issue is that this particular
    avenue of attack was never brought to mind and as such, the vulnerability passed
    by unnoticed.