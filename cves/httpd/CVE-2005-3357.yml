CVE: CVE-2005-3357
yaml_instructions:
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
reported_instructions:
reported:
announced_instructions: "Was there a date that this vulnerability was announced to
  the world? You can\nfind this in changelogs, blogs, bug reports, or perhaps the
  CVE date. A good \nsource for this is Chrome's Stable Release Channel\n(https://chromereleases.googleblog.com/).\nPlease
  enter your date in YYYY-MM-DD format.\n"
announced: 2005-12-31T05:00Z
published_instructions:
published:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "There was a component of httpd where, if the user had a specific type
  of a \nSecure Socket Layer (SSL) and created a custom error page, they could cause
  \na denial of serivce through making the application crash. This was done by \nsubmitting
  an unsupported request to a certain type of port, which would \ncause a Null Pointer
  Expection.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews:
- 354394
bugs:
- 37791
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 16e5cdde498027254084025a100b219073f8d56f
  note: |-
    This was the fix commit that prevented NPE from occuring by checking if ssl was in use.

    Formerly 00b900faa0db3b7903fb0d356714871659347dd8 before HTTPD rewrote Git history.
vccs:
- commit: 74c5908625298214006685b6f4e7b1ce0a8c324d
  note: |-
    This commit changed and introduced the parameters that would go on to cause this vulnerability.

    Formerly aee1c6e7613e1fafa0f3f7700d379f162f925690 before HTTPD rewrote Git history.
- commit:
  note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    There did not appear to be test cases that were mentioned in the fix commit
    or other related commits. There were no mentions of tests being updated or
    lines being added or removed from files that would seem like test files.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    This vulnerability appears to have been found by a random user who discovered the
    NPE. They give a brief description on the setup they used through solaris
    debug and then gave a suggestion on a fix for it.
  date: 2005-12-05
  automated: false
  google: false
  contest: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    Based on the component in the bug report and the path in the fix
    commit
  name: SSL
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 23a3c20db2ba540c8e3557772944c0513086f3ed
    note: |-
      This commit dealt with additions to the module that this vulnerability

      came from. These do not appear to have a direct corrolation to the NPE

      that was generated by the original vulnerability, but may have added a

      component that was a part of the NPE request. There was an addition of

      an ssl io buffer and mulitple functions related to the ssl engine were

      added.


      Formerly e8c5a47a0b1befdcc525189278aaaf6bf63b6a4d before HTTPD rewrote Git history.
  - commit: a1e9d51be373b9c9e537d129a48e140232643a9e
    note: |-
      This commit was a fix for another vulnerability that is in this list.

      This dealt with a bug that was located very closely to this

      vulenrability.


      Formerly a344c639929f8f53a47ba5eab157162294c676f3 before HTTPD rewrote Git history.
i18n:
  instructions: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  note:
  answer:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean. Explain your answer
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The NPE comes from a non-ssl request being sent through an ssl port. The
      vulnerability would have been preventable if additional checks were in
      place to make sure no non-ssl request could be sent to an ssl port, or if
      verification would happen before the local variable "ssl" was reffered to
      when it was still null
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies: true
    note: |
      This vulnerability is based entirely on the fact that the interaction
      between when a request was sent in and when the handler attempts to access
      the ssl hook, is done with the same variable and there is no handling for
      when the current ssl is null.
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main mistake with this vulnerability was the lack of handling if ssl
    was null. The team never accounted for a non-ssl request to be made on a ssl
    port when if ssl is not currently in use. They seem to have had it written
    so that all requests that came to an ssl port would go through a ssl control
    check, regardless of the state of SSL.

    The fix that was implemented seems to effectively eliminate the problem as
    it immediately stops the problem from arising before it has a chance to
    raise an NPE. It was changed from only checking if the ssl protocol was on
    to verifying that ssl was acutally in use and not null, otherwise it would
    stop, as it was no longer relevant.
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 690
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
