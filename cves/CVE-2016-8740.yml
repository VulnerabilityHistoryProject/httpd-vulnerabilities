CVE: CVE-2016-8740

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE:
  CWE-119
CVSS: AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2016-12-05

published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date:
  2016-12-04

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description:
  A specific module, the modhttp2 module did not offer data length
  restriction for the request headers. This means that malicious sources could potentially
  send through large amounts of information, and block out threads, stopping others
  from being able to use it. This could lead to a denial of service attack.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:

reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
   - commit: 29c63b786ae028d82405421585e91283c8fa0da3
     note:
        SECURITY CVE-2016-8740
        mod_http2 properly crafted, endless HTTP/2 CONTINUATION frames could be used to exhaust all server's memory.
        Reported by Naveen Tiwari <naveen.tiwari@asu.edu> and CDF/SEFCOM at Arizona State University
        git-svn-id https://svn.apache.org/repos/asf/httpd/httpd/trunk@1772576 13f79535-47bb-0310-9956-ffa450edef68"
   - commit:
     note:
vccs:
  - commit: b87719bebc698f0c7da44cc57b0ecd101c5f0578
    note:
      mod_http2 fixes timeout vs. keepalive timeout use when closing strems on flush, adding pseudo header length check against limit_req_line
      git-svn-id https://svn.apache.org/repos/asf/httpd/httpd/trunk@1744415 13f79535-47bb-0310-9956-ffa450edef68"
  - commit:
    note:

upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer:
    The last test was written 5 years prior to this error, and most other tests were written over 10 years
    prior. this was not properly tested nor was it updated following the error,
  code:
    false
  fix:
    false

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer:
    false
  date:
  automated:
  google:
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer:
    This was in the Http2 module, which is support for the thehhtp/2 protocol h2
  name:
    http2

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
    - commit: 84ab9369b75139dda733dcc8307575d5589eaff1
      note:
        XML update.
        git-svn-id https://svn.apache.org/repos/asf/httpd/httpd/trunk@1771496 13f79535-47bb-0310-9956-ffa450edef68"
        This is a xml update where they did an extensive overhaul of a lot of
        legacy code. This potentially could be a good oportunity to make the
        overall system more secure and functional and close any exsisting issues

    - commit: b15154fbc74854ae12a7dc19226855bff4369b86
      note:
        a mod_http2 compiler fix, which was a change in the exact module as the
        above issue. In general, it offers a better experience be controlling
        certain issues/errors

major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer:
  events:
    - name: Rebuild documentation
      date: Nov 15,2016
    - name: mod_proxy 103 workaround
      date: Nov 3, 2016

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
      true
    note:
      This entire issue centers around the idea that the input in the
      header was not being checked. This is a serious issue that the field length
      was not being restricted
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer:
    One of the biggest mistake is the lack of integration/unit tests
    that verify for strange inputs and weird situations. In addition, better coding
    practices like quality assurance testing would go a long way in resolving this
    issue. Overall better design to verify input size could have assisted.
