CVE: CVE-2003-0253
yaml_instructions:
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
reported_instructions:
reported:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2003-07-09
published_instructions:
published:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: "MPM's are multi-processing modules which are used to bind to network
  ports on a \nmachine, accept requests, and handle requests. This vulnerability occurs
  when\nthe MPM binds to a specific uncommonly used network port. When the C accept()
  \nmethod (accepts a connection on a socket ) is called it would return an error,
  \ncausing a temporary denial of service. \n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: c61229986c131d6856f40fd39251815d2a0f0c81
  note: Formerly 9bc02aba1972e6a7b2e691008cdac6618ef2f516 before HTTPD rewrote Git
    history.
vccs:
- commit: 18af8a478cfd4cd7603f934df623de83b962dd37
  note: Formerly bdf5ceae98da35c9e84c0d62742c4aa0b9959138 before HTTPD rewrote Git
    history.
- commit: 91aa6046003482482ff7028ca3ca9b62cdcdf1aa
  note: Formerly 0dc8f8806cdfd18fb89bee6a565df099b130a5a2 before HTTPD rewrote Git
    history.
- commit: ccb09e13da01852bb9354a5d0265b53659899e9d
  note: Formerly a4eadbfc17f23045116fadc782e433735a94acb8 before HTTPD rewrote Git
    history.
- commit: b9d020553f15fdf11fd9a2b02c81f61a96203424
  note: Formerly ee7a8efcc130f3b0061f637ee11e3d474d86456b before HTTPD rewrote Git
    history.
- commit: 69adf379b47312601e820229d18f2e2b654e6cc4
  note: Formerly 747aa76877ed77b2baede0712e01c17d867d6e08 before HTTPD rewrote Git
    history.
- commit: b75c7339bd42f6815a342209f0a5560cc18efd3e
  note: Formerly 72ad541beb16444b3146ddf62807c13fe0ebb6d9 before HTTPD rewrote Git
    history.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: There were no automated unit tests involved in this vulnerability.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The problem was reported by Saheed Akhtar. No mention on how Saheed came across
    the vulnerability.
  date: 2003-07-09
  automated:
  google: false
  contest: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: The path to get to the source code file is server/mpm/prefork/prefork.c
  name: server
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: b75c7339bd42f6815a342209f0a5560cc18efd3e
    note: "The comments on this commit suggested that the original author tested the
      code \n\nby simply running it and wasn't confident that it would work for everyone
      running it. \n\nThe author mentions to comment some code out if its not working
      correctly. Commenting \n\nout his code wasn't the fix for the vulnerability.\n\n\nFormerly
      72ad541beb16444b3146ddf62807c13fe0ebb6d9 before HTTPD rewrote Git history."
  - commit:
    note:
i18n:
  instructions: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  note:
  answer:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean. Explain your answer
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: "This fix had to deal with what inputs were acceptable. Removing one if
      \nstatement and calling another function earlier fixed the vulnerability.\n"
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "A lot of factors came to allow this vulnerability to occur. The original
    author\nwasnt confident in the comments that the code would work all of the time.
    Edge \ncases in the code weren't properly met. Its possible that there was confusion
    \nin the requirements and the task wasnt descriptive enough to who was working
    on \nit. Unit tests were not made to ensure it the code worked as intended. \nThe
    mitigations for this fix on the CWE was to run fault injection tests. These\ntests
    weren't applied before and after the fix. This is one reason for the\nvulnerability
    to appear.\n"
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: [703]
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
