CVE: CVE-2009-1195
yaml_instructions:
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
reported_instructions:
reported:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2009-05-28T20:30Z
published_instructions:
published:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The Options=IncludesNOEXEC in configuration for Apache HTTP Server is not handled
  properly on the AllowOverride directive. By default the code allowed a local user
  to execute code, and the language used in naming this option was counter intuitive.
  The vulnerability led to a local user being able to execute code that could escalate
  their privileges and help further attack the system.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 86f2c1bda51cab0f91a7a5fd060ddb4303759c65
  note: |-
    added back OPT_INCNOEXEC and hide OPT_INC_WITH_EXEC as internal-only

    Formerly e023685a080c172b95ba92ad085efe67cd0f95a9 before HTTPD rewrote Git history.
- commit: 06502da8cc0bc69dab72f113341e195ec4fb8c50
  note: Formerly 285ba47152d3f5d31162bfa8c339184f023122db before HTTPD rewrote Git
    history.
- commit: 6471e670e676c5c3538fc5fd9caa09207d0d1db9
  note: |-
    'AllowOverride Options=IncludesNoExec' doesn't allow exec with

    .htacess files


    Formerly bd3a7c902a59b5dc43f542190ab4ac3795e9ab75 before HTTPD rewrote Git history.
- commit: cbadf85c0d113456c0c3a862f65a39c578bd37d3
  note: Formerly 444b2b977be80fb03483535bb5705ef86d8ae072 before HTTPD rewrote Git
    history.
- commit: 8ccb5e5701294f4ebf1f96d219536720d61a3286
  note: Formerly 88325d70a7f0b2aba7fbe293f7d02d0a9dc0e821 before HTTPD rewrote Git
    history.
- commit: 489bc420ddbbb3ba7bd6f4b8b8e44fc4183deaf0
  note: Formerly 701b5288abf6d237e1793d9c9d0236a659f9dbc4 before HTTPD rewrote Git
    history.
vccs:
- commit: 3afccb5343dd2b9463d68b99202fb1c17b53989c
  note:
- commit: e56d60126ecf3c6c2162d819084a98325a1b865e
  note: complete rewrite on the include logic, introduced the "without exec"
- commit: c0c5249f2d30b441bb8dd2703be3e9693e1f8b4b
  note:
- commit: c0c5249f2d30b441bb8dd2703be3e9693e1f8b4b
  note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    doesn't look like there are any unit tests, its hard to tell because
    it is a config issue so there are multiple files and I can't find specific
    tests for any of them, also their test naming convetions are a bit confusing
  code:
  fix:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    Jonathan Peatfield filed a bug, note worthy comment he left on the bug
    report... "I should add that I've not even tried compiling with the changes I'm
    suggesting, as I've been trying to understand what is going on for the past 6
    hours and it is now 2am here..."
  date: 2009-03-10
  automated: false
  google: false
  contest:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: true
  name: server's config filters subsystem
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: e023685a080c172b95ba92ad085efe67cd0f95a9
    note: |
      added back OPT_INCNOEXEC and hide OPT_INC_WITH_EXEC as internal-only, so
      it seems like they reintroduced the bad semantics for the sake of backwards
      compatibility, but at least can't do exec on .htaccess files.
  - commit:
    note:
i18n:
  instructions: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  note:
  answer:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean. Explain your answer
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: |
      The default functionality was not the most secure, which lead to the
      vulnerability being there in the first place, if no exec was the default
      behavior this would have likely been avoided.
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "This was a design mistake, since the system wasn't defaulting to secure\noptions
    but rather had a configuration option to keep local users from\nexecuting file
    inputs. The solution they opted for was to add code to\nAllowOverride so that
    it does not permit Includes with exec= enabled to\nbe configured in an c file
    so user can't input code to execute\nin those files. They also made semantic changes
    so that the OPT_INCLUDES\ndoesn't default to with exec (using with instead of
    without makes it\nmore clear). I think the most important thing here was the semantic
    change\nas it honors security by default and helps avoid user error. \n"
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 16
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
