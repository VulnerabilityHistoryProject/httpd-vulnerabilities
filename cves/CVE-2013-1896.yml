CVE: CVE-2013-1896
yaml_instructions:
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
reported_instructions:
reported:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2013-05-07
published_instructions:
published:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The http protocol has grown over the years, and has gained multiple extentions
  to serve different purposes.  One such extention is WebDAV (Web Distributed
  Authoring and Versioning) which extends the http protocol to add request methdos
  such as COPY, MOVE, etc. to allow for remotely interacting with a servers
  resources or documents.  One place WebDAV is used is in version control over
  HTTP (as opposed to SSH).  Appache HTTPD is one of the few web servers that
  have native support for WebDAV.
  One thing that must be ensured when implementing WebDAV is that any URIs
  being modified in the context of WebDAV must be on a server that implements
  WebDAV.  Depending on your implementation, forgetting to check for WebDAV at
  the URI you are trying to access can cause issues.  This could be used by an
  attacker to specifically try to make a request involving URI that does not have
  WebDAV and crash the server.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 116211e090ed0a7d1ca4ecd514b3f5c28541f939
  note: Moved the check for DAV enabled to a higher level function.
- commit: f2262be183fb35ce4aa720107cd27d28ced1d07d
  note: Repeat of the commit above, likely a review.
- commit: 7608e940c1821dc70907adf6d3c48abdd729476b
  note: Repeat of the commit above, likely a review.
vccs:
- commit: ac8004f32fa78065d70acc56da8ba42664a37e35
  note: Added a check for DAV enabled (in the wrong function).
- commit:
  note:
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    No unit tests were added as a result of this change, and it doesn't appear
    that this specifcally was ever unit tested. This might be a good thing to test
    for in integration testing since it involves sending certain types of requests
    to the system as a whole.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: |
    The vulnerability was discovered and a fix was proposed by Ben Reser. The fix
    was accepted by Apache soon after. There isn't much information about how he
    did other than the date, it appears that he was not an employee of Appache.
  date: 2019-03-07
  automated: false
  google: false
  contest: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: |
    This vulnerability resides in mod_dav, which is a file used to add version control
    support (or WebDAV in general) to the server. This WebDAV is essential for allowing
    modification of files over HTTP like with the use of version control.
  name: mod_dav
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  instructions: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  note:
  answer:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean. Explain your answer
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      There are multiple layers of security when it comes to http requests,
      certain types of requests can't include a body, others can, but rely
      on a specific structure, and finally all of the most basic entries should
      be checked to ensure they are valid.
      Because of this, it is important to check input from an HTTP request
      multiple times in multiple layers of your architecture.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Anything can be passed in the body of an HTTP request, and one of the most
      important features of an HTTP server is to ensure that the infomormation is
      sanatized, or filtered to ensure that only real requests are made.
      Even non-HTTP standard data can be provided like in the form of WebDAV and
      they should be treated with the same amount of caution.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      Version control is a very complex system with many different ways to interact.
      Because of this, there is basically no limit to the type of information that can
      be provided in the body of an HTTP request to a version control system.  The
      complexity of what can and can't be provided here makes it nearly impossible to
      know what is malicious and what is not.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Although at it's core, the patch for this was just originally a coding mistake
    placed in the wrong function, overall, this is an architectural design mistake.
    The patch for this was simply adding a single if statement to check a specific
    case, but there was a real possibility that more places to include URIs could
    have been added in the future.  This means that all URIs that are being used to
    make WebDAV requests should be checked, not just this one.  A much stronger
    architecture would be one that has a subsystem dedicated to making WebDAV requests
    that does not trust input from the subsystem that handles WebDAV requests.
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 476
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
