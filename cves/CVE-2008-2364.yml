CVE: CVE-2008-2364
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 399
CVSS: AV:N/AC:L/Au:N/C:N/I:N/A:P
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2008-06-10
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A flaw was discovered when a server would have to handle excessive interim responses. In a situation where a user who is using the proxy is tricked into visiting a 
  malicious web-server, the proxy would need to use stack or heap memory. If this was continually done
  it could exhaust stack/heap space and crash the server.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 48fb51cf64f6a79511af5ae9128e26ed00a04db6
  note: cve status update
- commit: 52d29a43ce04c396da3ae26c16c04b47a9f77ff7
  note: status update
- commit: 52d29a43ce04c396da3ae26c16c04b47a9f77ff7
  note: status update
- commit: 4711f90002dea305600274287e470b696f6ae79b
  note: Added checks for the amount of interim respones sent
vccs:
- commit: 4785974c5a8a5f485052d2ea8da68ffef2c2846c
  note: Introduction of logic without constraints on number of interim responses
- commit:
  note:
- :commit: 70222db4a27475f9ef089ffc7a53be495ce601fb
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 52d29a43ce04c396da3ae26c16c04b47a9f77ff7
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: aa74c779048f047c305c4d029295ba6ad5734fc2
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 8904f26467635f49feda66703922d384f844620a
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 4ae1f9c6f9ecab0f914797e5cbe88d780d8f3e41
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 93702f00637a305833b89f9c1a9f85bab904e8ca
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 8ed4f95d64bd38c58f9eb4a731cd8ebad7926f20
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 403ec62fcc05536a565e97d3526726a398b0036b
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: feea34a2be70257e34b90bd9d643de319a3e1d67
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 7223f3b8ad4940a52fa6a9a21077e8195e46dace
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: d469fe656631bcc1ed513a9bf301687ae5f0b951
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 8dc39a0ae2e33a5d4217478881a4e6388eaab653
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: f4cafbe87b4d3713e1d85b461de29bb605586069
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: f93a11a445664100c8b601cfcfafa7e50f8dbee8
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 5a3d51825da4d5ad16e0cb0b6431a489bd77728a
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 909d4af17dc16bcadaf89782d04c71bd388ed8bb
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 16d57e771c31c60fb611784b27773d74318be270
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 02e9a1f6ae093f5225ecdf5fb4f7fa50e8b2ac39
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 7cc3526ed591737523cd897fbc17ec2c16e7817c
  :note: This VCC was automatically discovered by the archeogit tool
- :commit: 2b291cb1270e5a2bcc982ae3de28d63dd98f62a8
  :note: This VCC was automatically discovered by the archeogit tool
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: Definitely not. An unlimited amount of interim responses were allowed prior
    to the fix.
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave this part blank.
  answer: Discovered by Ryujiro Shibuya.
  date: 2008-06-10
  automated: false
  google: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
  answer: Found through file path
  name: Proxy
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: a7e6fa083465381cfc4ab2847eb9ee3c24cf8afe
    note: |
      Here they added the ability to accept interim responses from the backend which may be
      in protocols that they do not recognize. With this commit they can accept or supress and interim response.
      This choice was made with caution as to not break anything. 
  - commit: 0213659aa318d666ba244511bae0a25ded43a426
    note: |
      They were weary about forward proxy's and added some minimal protection against bad requests.
  - commit: e93f136a0005582788a3d14834d504c83bd05730
    note: |
      The check of the prior commit was removed. Looks like their was some debate about what they should be
      checking in the forward proxy
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I did not find any major events.
  events:
  - name:
    date:
  - name:
    date:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      They assumed that interim responses were all genuine. 
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies: true
    note: |
      An enviromental variable was created to check the amount of interim responses.
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "This is an oversight in design and probably occured simply because it was\
    \ never discussed. Somewhere in the planning phase there must have been a diagram\
    \ depicting the interaction between the proxy and the web server. There was no\
    \ consideration of how the system could be harmed given that the proxy was used\
    \ to communicate with a malicious web server.\nThis vulnerability falls under\
    \ the Availability category in the CIA model because it could be used to exhaust\
    \ stack/heap space and create a DOS attack. The fix for this vulnerability was\
    \ a simple flag which checked the amount of interim responses done by the forward\
    \ proxy."

